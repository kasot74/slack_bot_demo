name: Deploy to AWS ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: install-aws-cli-action
      uses: unfor19/install-aws-cli-action@v1

    - name: Log in to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        AWS_REGION: ${{ secrets.AWS_REGION }} 
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        echo "Logging in to Amazon ECR..."
        aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REPOSITORY"

    - name: Build Docker image
      run: docker build --no-cache -t slock_bot:latest .

    - name: Tag Docker image
      env: 
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}/slock_bot/app
      run: docker tag slock_bot:latest "$ECR_REPOSITORY:latest"

    - name: Push Docker image to ECR
      env: 
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}/slock_bot/app
      run: docker push "$ECR_REPOSITORY:latest"

    - name: SSH commands to load and run the Docker container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |    
          bash /home/${{ secrets.EC2_USER }}/aws.bash
          cd /home/${{ secrets.EC2_USER }}/slock_bot
          docker-compose down
          docker-compose pull   
          docker-compose up -d --force-recreate

    - name: Notify Slack
      if: contains(github.event.head_commit.message, '[更新說明]')
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        GIT_COMMIT_MSG: ${{ github.event.head_commit.message }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"烏薩奇更新完成！\n更新內容: $GIT_COMMIT_MSG\n\"}" "$SLACK_WEBHOOK_URL"
